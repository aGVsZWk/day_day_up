# 单元测试与功能测试的区别:
功能测试：站在用户的角度从外部测试应用
单元测试：站在程序员角度从内部测试应用

(1) 先写功能测试，从用户的角度描述应用的新功能。

(2) 功能测试失败后，想办法编写代码让它通过（或者说至少让当前失败的测试通过）。此时，使用一个或多个单元测试定义希望代码实现的效果，保证为应用中的每一行代码

(3) 单元测试失败后，编写最少量的应用代码，刚好让单元测试通过。有时，要在第 2 步和第 3 步之间多次往复，直到我们觉得功能测试有一点进展为止。

(4) 然后，再次运行功能测试，看能否通过，或者有没有进展。这一步可能促使我们编写一些新的单元测试和代码等。

由此可以看出，这整个过程中，功能测试站在高层驱动开发，而单元测试则从低层驱动我们做些什么。


# 遵守"不测试常量"规则, 使用模板解决这个问题
单元测试要测试的其实是逻辑, 流程控制和配置. 编写断言检测HTML字符串中是否有指定的字符序列, 不是单元测试应该做的.

直接将获取到的响应的html解码. 和手动渲染的本地的html比较, 测试是否相等.

# TDD流程
TDD流程中的主要概念:
- 功能测试
- 单元测试
- "单元测试/编写代码"循环
- 重构

1. 只有单元测试
![](assets/markdown-img-paste-2019080713073299.png)

2. 既有功能测试, 也有单元测试
![](assets/markdown-img-paste-20190807130849167.png)

先编写一个功能测试, 看着它失败.
接下来进入"单元测试/编写代码"循环, 直到单元测试通过
然后再回到功能测试, 查看是否有进展, 这一步也可以多编写些应用代码, 在编写更多的单元测试, 如此一致循环下去.


要使用功能测试检查重构前后的表现是否一致. 不过, 可以修改,添加或删除单元测试, 或者使用单元测试循环修改实现方式.

**功能测试是应用是否能正常运行的最终评判. 单元测试只是整个开发过程中的一个辅助工具.**



# 路由斜线问题
不在修改数据库的"操作"后加斜线.


# 参数命名
如果一定要和python自带的冲突, 那就在后面加下划线吧. `list_`



# self.assertRaises上下文管理器
新的单元测试方法, 检查做某件事是否会抛出异常, 可使用`self.assertRaises`.
```python
with self.assertRaises(ValidationError):
    item.save()
```
等效于:
```python
try:
    item.save()
    self.fail('The save should have raised an exception')
except ValidationError:
    pass
```


# 模板注释重复
模板中jinja2语法, {% block xxx %} {% endblock %}. xxx不允许重复, 即使是在注释中也不行.
